p325~350
검색처리
mybatis의 동적sql을 이용해 DB의 데이터에서 제목/내용/작성자 검색하고 웹페이지에 보여준다

EL (Expression Language) - ${변수} ${param.abc}
[ attribute : 메소드를 통해 저장되고 관리되는 데이터 ]
PageContext / Request에서 사용될때
setAttribute("key", value) → 값을 넣는다.
getAttribute("key") → 값을 가져온다.
removeAttribue("key") → 값을 지운다.



JSTL (Jsp Standard Tag Library) - c를 이용/if문, for문, DB를 편하게 처리할 수 있는것
(1) Core  (prefix : c)
→ 일반 프로그래밍에서 제공하는 것과 유사한 변수선언
→ 실행 흐름의 제어 기능을 제공
→ 페이지 이동 기술 제공

(2) Formatting (prefix : fmt)
→ 숫자, 날짜, 시간을 포매팅하는 기능을 제공
→ 국제화, 다국어 지원 기능 제공

(3) DataBase (prefix : sql)
→ DB의 데이터를 입력 / 수정 / 삭제 / 조회 하는 기능을 제공

(4) XML (prefix : x)
→ XML문서를 처리할 때 필요한 기능 제공

(5) Function (prefix : fn)
→ 문자열을 제공하는 함수 제공

#CORE
1. <C:set>
자바의 int num = 100; 을 <c:set var="num" value="100">으로 바꿔 쓴 코드입니다. 어렵지 않죠?? 

2. <c:out>
역시 자바의 system.out.println(" 안녕하세요 ");을 간단하게 <c:out value=" 안녕하세요 ">로 변경 되었습니다. 또한 제 생각에는 장점이라고 생각하는데, 이 태그는 특수문자를 그대로 출력합니다.

3. <c:remove>
한 영역의 변수명을 지우는 코드입니다. 만약에 영역을 생략할 경우 모든 영역의 변수가 삭제됩니다. 
영역에는 아까 Attribute에서 정리했다 시피 (page → request → session → application) 순서의 영역을 가집니다.

4. <c:if>
자바의 if - else 문과 동일하지만 JSTL에서는 else문이 없습니다. 여기서 scope값을 생략하면 기본으로 page영역이 지정됩니다.

5. <c:choose> / <c:when> / <c:otherwise>
자바의 switch 구문과 if-else 구문을 혼합한 형태로 다수의 조건문을 걸고 싶을때 사용합니다.

6. <c:forEach>
자바에서는 for문으로 불리던게 JSTL에서는 forEach로 변경되었습니다. 배열이나 컬렉션, Map에 저장되어 있는 값들을 순서대로 처리 할때 사용되며, 
<c:forEach var=" i " begin=" 1 " end=" 10 " step=" 1 "> ${ i } </c:forEach>로 i가 1부터 10까지 1씩 증가한다는 구문을 쉽게 만들 수 있습니다.

7. <c:forTokens>
자바의 StringTokenizer 를 JSTL를 사용하면 아주 간편하게 사용할 수 있습니다. 
<c:forTokens var="abc" items="안녕/하세요/hunit블로그/입니다" delims="/" >이렇게 코드를 작성할 수 있겠죠.

8. <c:catch>
자바의 Try-catch 구문과 같죠. 단 <c:catch>태그는 에러내용을 ${abc}로 빼내서 처리해줘야 합니다.

9. <c:redirect>는 아래와 같이 파라미터 값을 지정된 url로 보냅니다.
<c:redirect url="baordList.jsp">
<c:param name="abc" value="안녕하세요" />
</c:redirect>

10. <c:import>는 <jsp:include>와 비슷합니다.

11. <c: url>은 <c:set>과 비슷하며 GET방식으로 파라미터를 전달합니다.


//1. id 로 접근해서 가져오기
var value = $('#test_id').val();
//2. class 로 접근해서 가져오기
var value = $('.test_class').val();
//3. name으로 접근해서 가져오기
var value = $('input[name=test_name]').val();

#jquery-더 알아보기
id       하나의 요소만 가능(페이지 유일)  CSS에서 식별자로 사용 가능   jQuery: $(“#아이디”)
class   여러 요소 적용 가능                  CSS에서 식별자로 사용 가능   jQuery: $(“.클래스명”)
name  여러 요소 적용 가능                  CSS에서 사용 불가               jQuery: $(“input[name=이름]“)  <form> submit 전송시 사용 가능


&nbsp; - ” ” : 공백(스페이스 한 칸)을 의미
&lt; - 부등호(<)
&gt; - 부등호(>) 
&amp; - 앰퍼샌드(&) 기호 
&quot; - 쌍따옴표(“) 
&#035; - sharp(#) 
&#039; - 따옴표(‘)


#QnA
submit() 내부동작?? - form 태그 안에 input만 넘김 / .append가 있다면 그것도 넘김

this와 $(this) - 버튼 a태그

$(".paginate_button a") - class에서 a태그를 이용함

trim을 왜 사용하는가 - if문처럼 동적으로 sql을 사용하기 위해

web.xml ->root-context 에서 xml을 모두 읽어들임->interface도 다 읽어들임->java동작 

local/운영에 따라 달라짐
local - log.info
운영 - debug

amazon RDS
AWS책-아마존 웹서비스를 다루는 기술

c태그 - el보다 보안성이 좋음